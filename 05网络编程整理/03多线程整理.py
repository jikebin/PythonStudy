'''
多线程整理：
大纲：线程的两个实现方式、常用的方法、相关定义、并行操作的解决方式
--------------------------------------------------------------------------------------------------------------------
线程的两个实现方式：
    import threading
    #方式一、面向过程
    def test1(num):
        print(num)
    #多线程启动
    t1 = threading.Thread(target=test1,args=(1,))
    t1.start()
    # ------------------------------------------------------
    #方式二、面向对象
    class MyThread(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)

        def run(self):
            print("多线程执行成功")
    t2 = MyThread()
    t2.start()
--------------------------------------------------------------------------------------------------------------------
线程中的常用方法：
    threading.Thread()              #创建多线程对象
    对象.star()                     #启动多线程
    对象.join()                     #线程阻塞，当线程运行完后再继续向下运行，否则程序则阻塞再这
    对象.setDaemon(True)            #线程守护，当调用该方法后，该子线程会随着主线程的结束而结束
--------------------------------------------------------------------------------------------------------------------
相关定义：
    1.线程与进程：
        线程：cpu执行的最小单位(是一堆指令集合，一般是100个)
        进程：是一堆资源集合(一般包含最少一个线程)
        区别：线程之间可以进行数据交换，而进程不可以，进程之间完全独立互不影响
    2.并发与并行：
        并发：只使用一个CPU切换执行，由于cpython有GIL锁，同一时刻只能有一个线程进入解释器，所以是并发操作
        并行：同时使用多个cpu一起执行，java语言是真正的并行
    3.IO密集和计算密集
        IO密集：拥有IO阻塞，如sleep()
        计算密集：一直占用cpu资源

--------------------------------------------------------------------------------------------------------------------
并行操作的解决方式：
    结论：
        if 是IO密集型的可以使用多线程
        if 是计算密集型的可以使用  c编程，或多进程+协程
--------------------------------------------------------------------------------------------------------------------
'''