'''
复习大纲：
    1.迭代器
    2.生成器
    3.装饰器
    4.内置函数
    5.函数基础
    6.set集合
    7.深浅拷贝
    8.文件操作
    9.编码
    10.字符串
    11.字典
    12.元组
    13.列表
-------------------------------------------------------------------------------------------
迭代器：
大纲：迭代器、生成器、可迭代对象
    迭代器(iterator)：
        满足两个条件：有__next__() 和 __iter__()
    生成器(generator)：
        说明：生成器是特殊的迭代器
        特殊1：生成器数据，现使用现开辟空间，节省内存空间
        特殊2：生成器数据只能使用一次
        特殊3：生成器底层是单向列表
    可迭代对象(iterable)：
        满足条件：有 __iter__() 即可
        相关数据类型：list tuple dict str 文件 set
        for循环做的三件事情：
            1.调用iter()方法，将可迭代对象变成迭代器
            2.循环调用next()方法，取出数据
            3.捕获异常，并结束循环
-------------------------------------------------------------------------------------------
生成器：
大纲：列表生成式、生成器创建(两种)、yield关键字
列表生成式：
    1.简单 [x for x in range(10)]
    2.一般 [x**2 for x in range(10)]
    3.复杂  f = lambda a : a*a
            [f(x) for x in range(10)]
生成器创建：(两种)
    1. (x for x in range(10)) #该方法返回的是生成器对象(generator)
    2.使用yield关键字，如下：
        def foo():
            print("ok1")
            yield 1
            print("ok2")
            yield 2
yield关键字：__next__、__iter__、send()
    1.函数内部带有yield关键字，则可以调用以上三个方法
    __next__ 和 __iter__ 是迭代器的关键
    send() 方法，类似 next() 但是却可以为 yield赋值
-------------------------------------------------------------------------------------------
装饰器：
大纲：装饰器的三个前提、装饰器的原则、装饰器的三种实例
装饰器的三个前提：
    1.定义域：LEGB  local enclosing global built-in
    2.高阶函数:函数名可以作为参数和返回值
    3.闭包公式：闭包 = 内部函数 + 外部变量(非全局变量)
装饰器的原则：
    1.遵守开闭原则：对扩展开放，对修改关闭
    2.装饰器，就是在不修改函数源码的情况下对函数功能进行扩展，并且不改变该函数的调用方式。
装饰器的三种实例：
    1.无参函数，无参装饰器
    2.带参函数，无参装饰器
    3.带参函数，带参装饰器
例：带参函数，带参装饰器
import time
def function(flag):
    def show_time(func):
        def inner(a,b):
            start = time.time()
            ret = func(a,b)
            end = time.time()
            print("运行时间为：",(end - start))
            print("函数的返回值为：",ret) #可以使用 return 返回结果
            print("装饰器的参数为：%s"%flag)
        return inner
    return show_time

@function("True")   #return show_time   # my_sum = show_time(my_sum)
def my_sum(a,b):
    return a+b
-------------------------------------------------------------------------------------------
内置函数：
大纲：常见的内置函数、匿名函数、高级内置函数
常见内置函数：
    len() next() iter() str() eval() bytes() ...
匿名函数：
    lambda a,b : a+b
高级内置函数：filter() map() reduce() from functools import reduce
    filter(func,str) #过滤功能，str为可迭代对象
    map(func,str) #修改功能
    reduce(func,str) #该func函数，需要两个参数，并且要有返回值
-------------------------------------------------------------------------------------------
函数基础：
大纲：函数特点、参数定义、参数赋值、函数返回值、变量作用域、高阶函数、递归思想
函数特点：
    1.减少重复
    2.易于修改和扩展
    3.保持代码一致性
参数定义：
    1.关键参数：name
    2.默认值参数：age = 12
    3.无命名可变长参数： *args
    4.有命名可变长参数：**kwargs
参数赋值：
    1.顺序赋值
    2.键值对形式赋值： age =11
    3.无命名可变长参数统一赋值：*[x for x in range(10)]
    4.有命名可变长参数统一赋值：**{key:value ...}
函数返回值：
    1.默认返回值：return None
    2.单个返回值：return 1
    3.多个返回值：return k1,k2,k3 #会将多个返回自封装成一个元组返回
变量作用域：LEGB
    local:内部作用域
    enclosing:局部作用域
    global:全局作用域
    built-in:系统作用域
高阶函数：
    函数可以作为参数和返回值
递归函数：
    1.有入口有出口
    2.自己调用自己
    3.所有递归都可以使用循环来替代
-------------------------------------------------------------------------------------------
set集合：
大纲：集合特性、集合的创建(2种)、集合操作、关系运算、判断
集合特性：
    1.无序、不重复
    2.集合中的元素必须是可哈希的(不可变数据类型)
集合的创建：
    1. set("sfsdnovmov")
    2. set([1,2,3,42,1,1,2,3])
集合操作：
    添加：
        add("dfsaf") #添加一个
        update("sfsfa") #添加一组
    删除：del clear remove pop(随机删除)
关系运算：
    并集：|
    交集：&
    差集：-
    对称差集：^
判断：
    ==  >   <
-------------------------------------------------------------------------------------------
深浅拷贝：
大纲：深拷贝、浅拷贝
深拷贝：
    import copy
    s1 = [x for x in range(10)]
    s2 = copy.deepcopy(s1)
浅拷贝：
    s1 = [1,2,3,[1,2]]
    s2 = s1.copy()
    s2 = s1[:]
-------------------------------------------------------------------------------------------
文件操作：
大纲：打开文件(2种)、模式、文件操作
打开文件的两种方式：
    f = open(path,模式,encoding ="utf8")
    pass
    f.close()
    ---------------------
    with open(path,模式,encoding="utf8") as f:
        pass
文件模式：
    r r+ rb w w+ wb a a+ ab
文件操作：
    读：read readline readlines for循环
    写：write writelines
    光标：tell()显示  seek()设置
    刷新：flush()
    截断：truncate()
-------------------------------------------------------------------------------------------
编码与解码：
大纲：基本原理、文件的编码与解码、编译器编码与解码
基本原理：
    编码：明文(unicode) --->二进制(bytes)
    解码：二进制(bytes) --->明文(unicode)
文件的编码与解码：
    1.明文：我们人类能够看懂的字符都是明文
    2.二进制：计算机在硬盘中存储的数据都是二进制，运算也是二进制形式
    3.编码：将明文输入到记事本程序中时会先保存到内存中，当我们保存到本地中时，会将明文以记事本默认的编码形式
        如：utf-8/gbk 等编码格式，将明文转换成对应的二进制码进行保存
    4.解码：在记事本打开文件的过程中，会按照该文件的默认编码形式进行相应的解码操作，也就是将二进制转换成明文形式
编译器的编码与解码：
    1.编译器内部也有自己的默认编码形式
    2.python是脚本语言，所以编译器直接读取的是文本信息
    3.编译器会将该文本进行编码后进行解析，如果文本中出现了无法解析的字符，程序则会报错
-------------------------------------------------------------------------------------------
字符串：
大纲：查询、拼接、格式化、拆分、替换、删空格、编码、统计、大小写、判断、eval()
    查询：切片 find or index
    拼接：join() center()
    格式化：format format_map
    拆分：split()
    替换：replace()
    删空格：strip()
    编码：encode() decode()
    统计：count() len()
    大小写：upper lower
    判断：in is  startswith  endswith
    eval()
-------------------------------------------------------------------------------------------
字典：
大纲：增删改查
    增 和 改 ：setdefault() update()
    查询：keys() values() items()
    删除： del clear() pop() popitem()
-------------------------------------------------------------------------------------------
列表：
大纲：增、删、改、查、统计、判断、排序
    增：append insert extend()
    删：del clear pop remove()
    改：切片修改
    查：切片 index()
    统计：count len
    排序：sort() reverse()
    判断：in is
-------------------------------------------------------------------------------------------
'''